/dts-v1/;
#include <st/h7/stm32h743Xi.dtsi>
#include <st/h7/stm32h743zitx-pinctrl.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

/ {
    model = "NTURT Epsilon 6 Vehicle Control Unit";
    compatible = "nturt,ep6_vcu";

    chosen {
        zephyr,console = &usart1;
        zephyr,shell-uart = &usart1;
        // zephyr,console = &cdc_acm_uart0;
        // zephyr,shell-uart = &cdc_acm_uart0;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,dtcm = &dtcm;
        zephyr,code-partition = &slot0_partition;
        zephyr,canbus = &fdcan1;
        zephyr,canopen-green-led = &canopen_green_led;
        zephyr,canopen-red-led = &canopen_red_led;

        nturt,rtc = &rtc;
        nturt,buzzer = &buzzer;
        nturt,brake-light = &brake_light;
        nturt,rtd-light = &rtd_light;
        nturt,imu = &imu;
        nturt,pow-in-volt = &pow_in_volt;
        nturt,pow-5v-curr = &pow_5v_curr;
        nturt,pow-5v-rpi-curr = &pow_5v_rpi_curr;
        nturt,pow-low = &pow_low;
    };

    aliases {
        led0 = &canopen_green_led;
    };

    mipi_dbi: mipi-dbi-spi {
        compatible = "zephyr,mipi-dbi-spi";
        spi-dev = <&spi1>;
        dc-gpios = <&gpiog 12 GPIO_ACTIVE_HIGH>;
        write-only;
        #address-cells = <1>;
        #size-cells = <0>;
    };

    // dummy only to expose node properties to the device tree
    dummy_leds: dummy-leds {
        compatible = "gpio-leds";
        status = "disabled";

        buzzer: buzzer {
            gpios = <&gpiof 2 GPIO_ACTIVE_HIGH>;
        };

        brake_light: brake-light {
            gpios = <&gpioa 7 GPIO_ACTIVE_HIGH>;
        };

        rtd_light: rtd-light {
            gpios = <&gpiod 9 GPIO_ACTIVE_HIGH>;
        };

        canopen_green_led: canopen-green-led {
            gpios = <&gpioe 0 (GPIO_ACTIVE_LOW | GPIO_OPEN_DRAIN)>;
        };

        canopen_red_led: canopen-red-led {
            gpios = <&gpioe 1 (GPIO_ACTIVE_LOW | GPIO_OPEN_DRAIN)>;
        };
    };

    // dummy only to expose node properties to the device tree
    dummy_buttons: dummy-buttons {
        compatible = "gpio-keys";
        status = "disabled";

        apps_micro: apps-micro {
            gpios = <&gpiof 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
            zephyr,code = <INPUT_KEY_0>;
        };

        pow_low: pow-low {
            gpios = <&gpioc 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
            zephyr,code = <INPUT_KEY_0>;
        };
    };

    pow_in_volt: pow-in-volt {
        compatible = "voltage-divider";
        io-channels = <&adc1 16>;
        full-ohms = <(49900 + 5600)>;
        output-ohms = <5600>;
    };

    pow_5v_curr: pow-5v-curr {
        compatible = "current-sense-amplifier";
        io-channels = <&adc1 6>;
        sense-resistor-milli-ohms = <10>;
        sense-gain-mult = <100>;
    };

    pow_5v_rpi_curr: pow-5v-rpi-curr {
        compatible = "current-sense-amplifier";
        io-channels = <&adc2 2>;
        sense-resistor-milli-ohms = <10>;
        sense-gain-mult = <100>;
    };

    otghs_ulpi_phy: otghs-ulpi-phy {
        compatible = "usb-ulpi-phy";
        #phy-cells = <0>;
        status = "disabled";
    };
};

// include here for them to reference the added nodes above
#include "dashboard.dtsi"
#include "sensors.dtsi"

&clk_lsi {
    status = "okay";
};

&clk_csi {
    status = "okay";
};

&clk_hsi48 {
    status = "okay";
};

&clk_hse {
    clock-frequency = <DT_FREQ_M(8)>;
    status = "okay";
};

&clk_lse {
    status = "okay";
};

&pll {
    div-m = <2>;
    mul-n = <240>;
    div-p = <2>;
    div-q = <20>;
    div-r = <2>;
    clocks = <&clk_hse>;
    status = "okay";
};

&pll2 {
    div-m = <2>;
    mul-n = <200>;
    div-p = <2>;
    div-q = <20>;
    div-r = <4>;
    clocks = <&clk_hse>;
    status = "okay";
};

&pll3 {
    div-m = <2>;
    mul-n = <128>;
    div-p = <8>;
    div-q = <8>;
    div-r = <8>;
    clocks = <&clk_hse>;
    status = "okay";
};

&rcc {
    clocks = <&pll>;
    clock-frequency = <DT_FREQ_M(480)>;
    d1cpre = <1>;
    hpre = <2>;
    d1ppre = <2>;
    d2ppre1 = <2>;
    d2ppre2 = <2>;
    d3ppre = <2>;
};

&backup_sram {
    status = "okay";
};

&flash0 {
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        // bootloader: 128KB
        boot_partition: partition@0 {
            label = "mcuboot";
            reg = <0x00000000 DT_SIZE_K(128)>;
            read-only;
        };

        // application image slot: 768KB
        slot0_partition: partition@20000 {
            label = "image-0";
            reg = <0x00020000 DT_SIZE_K(768)>;
        };

        // backup slot: 768KB
        slot1_partition: partition@100000 {
            label = "image-1";
            reg = <0x00100000 DT_SIZE_K(768)>;
        };

        // swap slot: 128KB
        scratch_partition: partition@1E0000 {
            label = "image-scratch";
            reg = <0x001e0000 DT_SIZE_K(128)>;
        };
    };
};

&dma1 {
    status = "okay";
};

&dma2 {
    status = "okay";
};

&dmamux1 {
    status = "okay";
};

// 16-bit APB1 timers at 240MHz, 10us resolution, 100 steps with 1ms period PWM
&timers4 {
    st,prescaler = <(2400 - 1)>;
    status = "okay";

    pwm4: pwm {
        pinctrl-0 = <&tim4_ch1_pb6 &tim4_ch2_pb7>;
        pinctrl-names = "default";
        status = "okay";
    };
};

&rtc {
    clocks = <&rcc STM32_CLOCK_BUS_APB4 0x00010000>,
             <&rcc STM32_SRC_LSE RTC_SEL(1)>;
    status = "okay";
};

// sync clock from PLL3_R at 64MHz, 4us sampling time with 4 oversampling
&adc1 {
    clocks = <&rcc STM32_CLOCK_BUS_AHB1 0x00000020>,
             <&rcc STM32_SRC_PLL3_R ADC_SEL(1)>;
    pinctrl-0 = <&adc1_inp6_pf12 &adc1_inp14_pa2 &adc1_inp16_pa0 &adc1_inp17_pa1>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    #address-cells = <1>;
    #size-cells = <0>;
    status = "okay";

    channel@6 {
        reg = <6>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@e {
        reg = <14>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@10 {
        reg = <16>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@11 {
        reg = <17>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };
};

// sync clock from PLL3_R at 64MHz, 4us sampling time with 4 oversampling
&adc2 {
    clocks = <&rcc STM32_CLOCK_BUS_AHB1 0x00000020>,
             <&rcc STM32_SRC_PLL3_R ADC_SEL(1)>;
    pinctrl-0 = <&adc2_inp2_pf13>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    #address-cells = <1>;
    #size-cells = <0>;
    status = "okay";

    channel@2 {
        reg = <2>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };
};

// sync clock from PLL3_R at 64MHz, 4us sampling time with 4 oversampling
&adc3 {
    clocks = <&rcc STM32_CLOCK_BUS_AHB4 0x01000000>,
             <&rcc STM32_SRC_PLL3_R ADC_SEL(1)>;
    pinctrl-0 = <&adc3_inp2_pf9 &adc3_inp3_pf7 &adc3_inp4_pf5 &adc3_inp5_pf3
                 &adc3_inp7_pf8 &adc3_inp8_pf6 &adc3_inp9_pf4>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    #address-cells = <1>;
    #size-cells = <0>;
    status = "okay";

    channel@2 {
        reg = <2>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@3 {
        reg = <3>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@4 {
        reg = <4>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@5 {
        reg = <5>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@7 {
        reg = <7>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@8 {
        reg = <8>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };

    channel@9 {
        reg = <9>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 65)>;
        zephyr,resolution = <16>;
        zephyr,oversampling = <2>;
    };
};

&usart1 {
    clocks = <&rcc STM32_CLOCK_BUS_APB2 0x00000010>,
             <&rcc STM32_SRC_PLL3_Q USART16_SEL(2)>;
    dmas = <&dmamux1 0 42 STM32_DMA_PERIPH_TX>,
           <&dmamux1 1 41 STM32_DMA_PERIPH_RX>;
    dma-names = "tx", "rx";
    pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

&usart6 {
    clocks = <&rcc STM32_CLOCK_BUS_APB2 0x00000020>,
             <&rcc STM32_SRC_PLL3_Q USART16_SEL(2)>;
    pinctrl-0 = <&usart6_tx_pc6 &usart6_rx_pc7>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

&i2c2 {
    clocks = <&rcc STM32_CLOCK_BUS_APB1 0x00400000>,
             <&rcc STM32_SRC_PLL3_R I2C123_SEL(1)>;
    pinctrl-0 = <&i2c2_scl_pf1 &i2c2_sda_pf0>;
    pinctrl-names = "default";
    clock-frequency = <I2C_BITRATE_STANDARD>;
    status = "okay";
};

&i2c4 {
    clocks = <&rcc STM32_CLOCK_BUS_APB1 0x00400000>,
             <&rcc STM32_SRC_PLL3_R I2C4_SEL(1)>;
    pinctrl-0 = <&i2c4_scl_pd12 &i2c4_sda_pd13>;
    pinctrl-names = "default";
    clock-frequency = <I2C_BITRATE_STANDARD>;
    status = "okay";

    imu: lsm6dso@6a {
        compatible = "st,lsm6dso";
        reg = <0x6a>;
        accel-range = <2>; // 4g
        accel-odr = <4>; // 104Hz
        gyro-range = <0>; // 250dps
        gyro-odr = <4>; // 104Hz
    };
};

&spi1 {
    clocks = <&rcc STM32_CLOCK_BUS_APB2 0x00001000>,
             <&rcc STM32_SRC_PLL3_P SPI123_SEL(2)>;
    dmas = <&dmamux1 2 38 STM32_DMA_PERIPH_TX>,
           <&dmamux1 3 37 STM32_DMA_PERIPH_RX>;
    dma-names = "tx", "rx";
    pinctrl-0 = <&spi1_sck_pg11 &spi1_miso_pg9 &spi1_mosi_pd7>;
    pinctrl-names = "default";
    cs-gpios = <&gpiog 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    status = "okay";
};

// does not use dma since the dma overhead is higher than the transfer time of
// 11 bytes
&spi4 {
    clocks = <&rcc STM32_CLOCK_BUS_APB2 0x00002000>,
             <&rcc STM32_SRC_PLL3_Q SPI45_SEL(2)>;
    pinctrl-0 = <&spi4_sck_pe2 &spi4_miso_pe5 &spi4_mosi_pe6>;
    pinctrl-names = "default";
    cs-gpios = <&gpioe 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    status = "okay";
};

&spi6 {
    clocks = <&rcc STM32_CLOCK_BUS_APB4 0x00000020>,
             <&rcc STM32_SRC_PLL3_Q SPI6_SEL(2)>;
    pinctrl-0 = <&spi6_sck_pb3 &spi6_miso_pb4 &spi6_mosi_pg14>;
    pinctrl-names = "default";
    cs-gpios = <&gpiog 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    status = "okay";
};

&fdcan1 {
    clocks = <&rcc STM32_CLOCK_BUS_APB1_2 0x00000100>,
             <&rcc STM32_SRC_PLL2_Q FDCAN_SEL(2)>;
    pinctrl-0 = <&fdcan1_tx_pb9 &fdcan1_rx_pb8>;
    pinctrl-names = "default";
    bitrate = <1000000>;
    sample-point = <800>;
    bitrate-data = <1000000>;
    sample-point-data = <800>;
    status = "okay";
};

&sdmmc1 {
    clocks = <&rcc STM32_CLOCK_BUS_AHB3 0x00010000>,
             <&rcc STM32_SRC_PLL1_Q SDMMC_SEL(0)>;
    pinctrl-0 = <&sdmmc1_d0_pc8 &sdmmc1_d1_pc9 &sdmmc1_d2_pc10 &sdmmc1_d3_pc11
                 &sdmmc1_ck_pc12 &sdmmc1_cmd_pd2>;
    pinctrl-names = "default";
    disk-name = "SD";
    bus-width = <4>;
    idma;
    status = "okay";
};

zephyr_udc0: &usbotg_fs {
    pinctrl-0 = <&usb_otg_fs_dm_pa11 &usb_otg_fs_dp_pa12>;
    pinctrl-names = "default";
    status = "okay";

    cdc_acm_uart0: cdc_acm_uart0 {
        compatible = "zephyr,cdc-acm-uart";
    };
};
